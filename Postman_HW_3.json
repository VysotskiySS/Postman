{
	"info": {
		"_postman_id": "32e27783-89d9-4d88-8cc6-6fdee8da9296",
		"name": "35_GR",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20591478",
		"_collection_link": "https://www.postman.com/cryosat-administrator-63620771/workspace/courseapi/collection/20591478-32e27783-89d9-4d88-8cc6-6fdee8da9296?action=share&creator=20591478&source=collection_link"
	},
	"item": [
		{
			"name": "HW_1",
			"item": [
				{
					"name": "EP_1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/get_method?name=Sergey&age=32",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_method"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "32"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Sergey",
									"type": "text"
								},
								{
									"key": "age",
									"value": "32",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_1?name=Sergey&age=32&weight=79",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_1"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "weight",
									"value": "79"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_2?name=Sergey&age=32&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_2"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Sergey&age=32&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Sergey&age=32&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Sergey",
									"type": "text"
								},
								{
									"key": "age",
									"value": "32",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_2",
			"item": [
				{
					"name": "T_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Проверить, что в body приходит правильный string.\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/first",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"first"
							]
						}
					},
					"response": []
				},
				{
					"name": "T_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Статус код 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Спарсить response body в json.\r",
									"var jsonData = pm.response.json();\r",
									"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"Проверить, что name в ответе равно name s request (name вбить руками.)\", function () {\r",
									"    pm.expect(jsonData.name).to.eql('Sergey');\r",
									"});\r",
									"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"Проверить, что age в ответе равно age s request (age вбить руками.)\", function () {\r",
									"    pm.expect(jsonData.age).to.eql('32');\r",
									"});\r",
									"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"Проверить, что salary в ответе равно salary s request (salary вбить руками.)\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(1000);\r",
									"});\r",
									" //Спарсить request.\r",
									"var reqData = request.data\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
									"});\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Проверить, что age в ответе равно age s request (age забрать из request.)\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
									"});\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что salary в ответе равно salary s request (salary забрать из request.)\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(parseInt(reqData.salary));\r",
									"});\r",
									"//Вывести в консоль параметр family из response.\r",
									"console.log(jsonData.family)\r",
									"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"pm.test(\"Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\", function () {\r",
									"    var respSalary_1_5_year = jsonData.family.u_salary_1_5_year\r",
									"    pm.expect(respSalary_1_5_year).to.eql(reqData.salary*4);\r",
									"    console.log(jsonData.family)\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Sergey",
									"type": "text"
								},
								{
									"key": "age",
									"value": "32",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_3",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "T_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json(); //Спарсить response body в json.\r",
									"var reqData = pm.request.url.query.toObject() //Спарсить request.\r",
									"\r",
									"//Статус код 200\r",
									"pm.test(\"Статус код 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
									"});\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Проверить, что age в ответе равно age s request (age забрать из request.)\", function () {\r",
									"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
									"});\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что salary в ответе равно salary s request (salary забрать из request.)\", function () {\r",
									"    pm.expect(jsonData.salary).to.eql(parseInt(reqData.salary)); \r",
									"});\r",
									"//Вывести в консоль параметр family из response.\r",
									"console.log(jsonData.family)\r",
									"//Проверить, что у параметра dog есть параметры name\r",
									"pm.test(\"Проверить, что у параметра dog есть параметры name\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property('name');\r",
									"});\r",
									"//Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Проверить, что у параметра dog есть параметры age.\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property('age'); \r",
									"});\r",
									"//Проверить, что параметр name имеет значение Luky.\r",
									"pm.test(\"Проверить, что параметр name имеет значение Luky.\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.name).eql(\"Luky\"); \r",
									"});\r",
									"//Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"Проверить, что параметр age имеет значение 4.\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.age).eql(4); \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_3?name=Sergey&age=32&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "T_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var resp = pm.response.json(); //Спарсить response body в json.\r",
									"var req = pm.request.url.query.toObject() //Спарсить request.\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {\r",
									"    pm.expect(resp.name).to.eql(req.name);\r",
									"});\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"Проверить, что age в ответе равно age s request (age забрать из request.)\", function () {\r",
									"    pm.expect(resp.age).to.eql(parseInt(req.age));\r",
									"});\r",
									"//Вывести в консоль параметр salary из request.\r",
									"console.log(req.salary);\r",
									"//Вывести в консоль параметр salary из response.\r",
									"console.log(resp.salary);\r",
									"//Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(resp.salary[0]);\r",
									"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(resp.salary[1]);\r",
									"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log(resp.salary[2]);\r",
									"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.))\", function () {\r",
									"    pm.expect(resp.salary[0]).to.eql(parseInt(req.salary));\r",
									"});\r",
									"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\", function () {\r",
									"    pm.expect(parseInt(resp.salary[1])).to.eql(req.salary*2);\r",
									"});\r",
									"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\", function () {\r",
									"    pm.expect(parseInt(resp.salary[2])).to.eql(req.salary*3);\r",
									"});\r",
									"//Передать в окружение переменную name\r",
									"pm.environment.set(\"name\",resp.name);\r",
									"//Передать в окружение переменную age\r",
									"pm.environment.set(\"age\", resp.age);\r",
									"//Передать в окружение переменную salary\r",
									"pm.environment.set(\"salary\", resp.salary[0]);\r",
									"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"//for (let i = 0; i < resp.salary.length; i++) {\r",
									" //   console.log(resp.salary[i]);\r",
									"//};\r",
									"for (let i in resp.salary){\r",
									"    console.log(resp.salary[i])\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://162.55.220.72:5005/object_info_4?name=Sergey&age=32&salary=1000",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Sergey"
								},
								{
									"key": "age",
									"value": "32"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "T_5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Json.parse(pm.request.body.raw\r",
									"var resp = pm.response.json(); //Спарсить response body в json.\r",
									"var req = request.data //Спарсить request.\r",
									"\r",
									"//Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"Проверить, что json response имеет параметр start_qa_salary\", function () {\r",
									"    pm.expect(resp).to.have.property('start_qa_salary'); \r",
									"});\r",
									"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_6_months\", function () {\r",
									"    pm.expect(resp).to.have.property('qa_salary_after_6_months'); \r",
									"});\r",
									"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_12_months\", function () {\r",
									"    pm.expect(resp).to.have.property('qa_salary_after_12_months'); \r",
									"});\r",
									"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(resp).to.have.property('qa_salary_after_1.5_year'); \r",
									"});\r",
									"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(resp).to.have.property('qa_salary_after_3.5_years'); \r",
									"});\r",
									"//Проверить, что json response имеет параметр person\r",
									"pm.test(\"Проверить, что json response имеет параметр person\", function () {\r",
									"    pm.expect(resp).to.have.property('person'); \r",
									"});\r",
									"console.log(+req.salary);\r",
									"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\", function () {\r",
									"    pm.expect(resp.start_qa_salary).to.eql(Number(req.salary));\r",
									"});\r",
									"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\", function () {\r",
									"    pm.expect(resp.qa_salary_after_6_months).to.eql(req.salary*2);\r",
									"});\r",
									"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\", function () {\r",
									"    pm.expect(resp.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
									"});\r",
									"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\", function () {\r",
									"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(req.salary*3.3);\r",
									"});\r",
									"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\", function () {\r",
									"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(req.salary*3.8);\r",
									"});\r",
									"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\", function () {\r",
									"    pm.expect(resp.person.u_name[1]).to.eql(Number(req.salary));\r",
									"});\r",
									"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"Проверить, что что параметр u_age равен age из request (age забрать из request.)\", function () {\r",
									"    pm.expect(resp.person.u_age).to.eql(Number(req.age));\r",
									"});\r",
									"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\", function () {\r",
									"    pm.expect(resp.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
									"});\r",
									"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"for (key in resp.person) {\r",
									"    console.log(key, resp.person[key]);\r",
									"};"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//pm.variables.set('name','{{name2}}')\r",
									"//pm.form-data.variables.set('name','{{name2}}')"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info_2",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info_2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HW_3",
			"item": [
				{
					"name": "EP_1_login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = pm.response.json(); //Спарсить response body в json.\r",
									"pm.environment.set(\"token\", resp.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "login",
									"value": "@VysotskiySS",
									"type": "text"
								},
								{
									"key": "password",
									"value": "CoursePostmanPass",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/login",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_2_user_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var resp = pm.response.json();//Спарсить response body в json.\r",
									"var reqBody = pm.request.body;//Спарсить request.\r",
									"var req = JSON.parse(reqBody.raw);\r",
									"\r",
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"person\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"u_age\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"u_name\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"u_age\",\r",
									"        \"u_name\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"qa_salary_after_12_months\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"qa_salary_after_6_months\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"start_qa_salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"person\",\r",
									"    \"qa_salary_after_12_months\",\r",
									"    \"qa_salary_after_6_months\",\r",
									"    \"start_qa_salary\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"//Проверка структуры json в ответе.\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test('start_qa_salary = salary', function () {\r",
									"    pm.expect(resp.start_qa_salary).to.eql(Number(req.salary));\r",
									"});\r",
									"pm.test('qa_salary_after_6_months = salary*2', function () {\r",
									"    pm.expect(resp.qa_salary_after_6_months).to.eql(Number(req.salary)*2);\r",
									"});\r",
									"pm.test('qa_salary_after_12_months = salary*2', function () {\r",
									"    pm.expect(resp.qa_salary_after_12_months).to.eql(Number(req.salary)*2.9);\r",
									"});\r",
									"pm.test('u_salary_1_5_year = salary*4', function () {\r",
									"    pm.expect(resp.person.u_salary_1_5_year).to.eql(Number(req.salary)*4);\r",
									"});\r",
									"\r",
									"//Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса get_test_user\r",
									"pm.environment.set(\"salary\", resp.person.u_salary_1_5_year);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"age\": 32,\r\n    \"salary\": 1000,\r\n    \"name\": \"Sergey\",\r\n    \"auth_token\": \"{{token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://162.55.220.72:5005/user_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"user_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_3_new_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"   \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"//Проверка структуры json в ответе.\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"var resp = pm.response.json(); //Спарсить response body в json.\r",
									"var req = request.data //Спарсить request.\r",
									"\r",
									"//В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test('check x2 salary', function () {\r",
									"    pm.expect(+resp.salary[1]).to.eql(req.salary*2);\r",
									"});\r",
									"pm.test('check x3 salary', function () {\r",
									"    pm.expect(+resp.salary[2]).to.eql(req.salary*3);\r",
									"});\r",
									"\r",
									"//проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
									"pm.test('salary x3 > x2 and salary', function () {\r",
									"    pm.expect(+resp.salary[2]).to.be.greaterThan(+resp.salary[1]);\r",
									"    pm.expect(+resp.salary[2]).to.be.greaterThan(+resp.salary[0]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "32",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Sergey",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/new_data",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"new_data"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_4_test_pet_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"daily_food\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"daily_sleep\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"daily_food\",\r",
									"    \"daily_sleep\",\r",
									"    \"name\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"//Проверка структуры json в ответе.\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"var resp = pm.response.json(); //Спарсить response body в json.\r",
									"var req = request.data //Спарсить request.\r",
									"\r",
									"//В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
									"pm.test('check daily_food = weight*0.012', function () {\r",
									"    pm.expect(resp.daily_food).to.eql(req.weight*0.012);\r",
									"});\r",
									"\r",
									"pm.test('check daily_sleep = weight*2.5', function () {\r",
									"    pm.expect(resp.daily_sleep).to.eql(req.weight*2.5);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "2",
									"type": "text"
								},
								{
									"key": "weight",
									"value": "7",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Bones",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/test_pet_info",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"test_pet_info"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_5_get_test_user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"age\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"family\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"children\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"integer\"\r",
									"                }\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"u_salary_1_5_year\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"children\",\r",
									"        \"u_salary_1_5_year\"\r",
									"      ]\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"salary\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"age\",\r",
									"    \"family\",\r",
									"    \"name\",\r",
									"    \"salary\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"//Проверка структуры json в ответе.\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"var resp = pm.response.json(); //Спарсить response body в json.\r",
									"var req = request.data //Спарсить request.\r",
									"var env_name = pm.environment.get('name')\r",
									"//Проверить что занчение поля name = значению переменной name из окружения\r",
									"pm.test('Занчение поля name = значению переменной name из окружения', function () {\r",
									"    pm.expect(resp.name).to.eql(env_name);\r",
									"});\r",
									"\r",
									"//Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
									"pm.test('Значение поля age в ответе соответсвует отправленному в запросе значению поля age', function () {\r",
									"    pm.expect(req.age).to.eql(resp.age);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "age",
									"value": "32",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								},
								{
									"key": "name",
									"value": "Sergey",
									"type": "text"
								},
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://162.55.220.72:5005/get_test_user",
							"protocol": "http",
							"host": [
								"162",
								"55",
								"220",
								"72"
							],
							"port": "5005",
							"path": [
								"get_test_user"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_6_currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var resp = pm.response.json(); //Спарсить response body в json.\r",
									"console.log(resp.length);\r",
									"var len = resp.length\r",
									"console.log(Math.floor(Math.random() * len));\r",
									"rnd_num = (Math.floor(Math.random() * len))\r",
									"var obj = resp[rnd_num]\r",
									"console.log(obj);\r",
									"pm.environment.set(\"Cur_ID\",obj.Cur_ID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "EP_7_curr_byn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"Cur_Abbreviation\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_ID\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Cur_Name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Cur_OfficialRate\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"Cur_Scale\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Date\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"Cur_Abbreviation\",\r",
									"    \"Cur_ID\",\r",
									"    \"Cur_Name\",\r",
									"    \"Cur_OfficialRate\",\r",
									"    \"Cur_Scale\",\r",
									"    \"Date\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"//Проверка структуры json в ответе.\r",
									"pm.test('Schema is valid', function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								},
								{
									"key": "curr_code",
									"value": "{{Cur_ID}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/curr_byn",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"curr_byn"
							]
						}
					},
					"response": []
				},
				{
					"name": "***",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var res_currency = pm.response.json();\r",
									"for (let i = 0; i < res_currency.length; i++) {\r",
									"    \r",
									"      pm.sendRequest({\r",
									"        \"url\": 'http://54.157.99.22:80/curr_byn',\r",
									"        \"method\": \"POST\",\r",
									"        \"body\": {\r",
									"            \"mode\": \"formdata\",\r",
									"            \"formdata\": [\r",
									"                {\"key\": \"auth_token\", \"value\": pm.environment.get(\"token\")},\r",
									"                {\"key\": \"curr_code\", \"value\": String(res_currency[i].Cur_ID)}\r",
									"            ]\r",
									"        }\r",
									"      },\r",
									"        (error, response) => {\r",
									"            var res_curr_byn = response.json();\r",
									"            if (response.code == 500){\r",
									"                return;\r",
									"            }\r",
									"            else if (response.code == 200){\r",
									"                if (Object.hasOwn(res_curr_byn, 'Cur_OfficialRate')) {\r",
									"                    console.log(res_curr_byn)\r",
									"                 }\r",
									"            }\r",
									"        });\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "auth_token",
									"value": "{{token}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://54.157.99.22:80/currency",
							"protocol": "http",
							"host": [
								"54",
								"157",
								"99",
								"22"
							],
							"port": "80",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
